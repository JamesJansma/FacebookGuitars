listing_task:
  description: >
    Using your tool to get the listings for guitar. When using the tool make sure to wait for an output before trying anything else.
    The tool if ran successfully will return a json with the form 'Model','Price','Condition'.
    Do not edit the price or condition value. With the title part of the 
    json you will need to clean and trim. Your goal is to find the true Model name of the guitar.
    Remove unnecessary words from the Model only included what you assume is the name of 
    model of guitar. If the title does not include a model of a guitar then remove the whole listing. 
  expected_output: >
    A organized json of the guitars along with their listing value and condition provided in the knowledge source.
  agent: listing_finder

market_task:
  description: >
    Using the output from the prior agent and task you will take a title from each item in the guitar listing json
    and insert it into the tool. 
    Then you will wait for the tool to return its value before saving that data in a json form. The values returned from 
    the tool will be the market guitars and will be a json of the form 'Model','Price','Condition'.
  expected_output: >
    The output will need to be in the form of a nested json with this structure. 
    class GuitarData(BaseModel):
      Model: str
      Price: float
      Condition: str

    class ListingJson(BaseModel):
      marketGuitars: List[GuitarData]  
      listingGuitars: List[GuitarData] 

    Where marketGuitars are the otuputs from the tool you use and listingGuitars is the information from the previous agent. 

  agent: market_value_finder

comparison_task:
  description: >
    Using the comparison tool and only that input the output of the previous agent into the tool. 
  expected_output: > 
    The output generated by the comparison tool. 
  agent: comparison_agent



